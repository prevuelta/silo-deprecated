(function (React,reactDom,Editor,DropZone,moment,DatePicker,reactRouterDom,bluebird,Form) {
  'use strict';

  var React__default = 'default' in React ? React['default'] : React;
  var reactDom__default = 'default' in reactDom ? reactDom['default'] : reactDom;
  Editor = Editor && Editor.hasOwnProperty('default') ? Editor['default'] : Editor;
  DropZone = DropZone && DropZone.hasOwnProperty('default') ? DropZone['default'] : DropZone;
  moment = moment && moment.hasOwnProperty('default') ? moment['default'] : moment;
  DatePicker = DatePicker && DatePicker.hasOwnProperty('default') ? DatePicker['default'] : DatePicker;
  bluebird = bluebird && bluebird.hasOwnProperty('default') ? bluebird['default'] : bluebird;
  Form = Form && Form.hasOwnProperty('default') ? Form['default'] : Form;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _objectSpread(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};
      var ownKeys = Object.keys(source);

      if (typeof Object.getOwnPropertySymbols === 'function') {
        ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
          return Object.getOwnPropertyDescriptor(source, sym).enumerable;
        }));
      }

      ownKeys.forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    }

    return target;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }

  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  function _possibleConstructorReturn(self, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
      return call;
    }

    return _assertThisInitialized(self);
  }

  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
  }

  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }

  function _iterableToArrayLimit(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance");
  }

  var LoaderIcon = function LoaderIcon() {
    return React__default.createElement("div", {
      className: "loader"
    }, React__default.createElement("div", {
      className: "sk-cube-grid"
    }, React__default.createElement("div", {
      className: "sk-cube sk-cube1"
    }), React__default.createElement("div", {
      className: "sk-cube sk-cube2"
    }), React__default.createElement("div", {
      className: "sk-cube sk-cube3"
    }), React__default.createElement("div", {
      className: "sk-cube sk-cube4"
    }), React__default.createElement("div", {
      className: "sk-cube sk-cube5"
    }), React__default.createElement("div", {
      className: "sk-cube sk-cube6"
    }), React__default.createElement("div", {
      className: "sk-cube sk-cube7"
    }), React__default.createElement("div", {
      className: "sk-cube sk-cube8"
    }), React__default.createElement("div", {
      className: "sk-cube sk-cube9"
    })));
  };

  var Loader = (function (props) {
    return props.show ? React__default.createElement(LoaderIcon, null) : null;
  });
  var MiniLoader = function MiniLoader() {
    return React__default.createElement("div", {
      className: "mini-loader"
    }, React__default.createElement(LoaderIcon, null));
  };

  var MESSAGE_TIMEOUT = 4000;
  var _store = {
    messages: [],
    isLoading: true
  };
  var store = {
    set: function set(key, value) {
      _store[key] = value;
      this.update();
    },
    get: function get(key) {
      return _store[key];
    },

    get messages() {
      return _store['messages'];
    },

    addMessage: function addMessage(message) {
      var _this = this;

      _store.messages.push(message);

      this.update();
      setTimeout(function () {
        _store.messages.shift();

        _this.update();
      }, MESSAGE_TIMEOUT);
    },
    update: function update() {}
  };

  var Notify = {
    alert: function alert(message) {
      store.addMessage({
        message: message,
        type: 'warning'
      });
    },
    message: function message(_message) {
      store.addMessage({
        message: _message
      });
    },
    component: function component(props) {
      return React__default.createElement("div", {
        id: "message"
      }, props.messages.map(function (m, i) {
        return React__default.createElement("div", {
          key: i,
          className: (m.type || '') + ' message'
        }, m.message);
      }));
    }
  };

  // @format
  function Fetch(path) {
    var method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'GET';
    var data = arguments.length > 2 ? arguments[2] : undefined;
    var type = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'json';
    var headers = {};
    var newData = null;

    switch (type) {
      case 'formData':
        var formData = new FormData();
        formData.append('file', data, data.name);
        newData = formData;
        break;

      case 'json':
      default:
        headers['Content-Type'] = 'application/json';
        newData = JSON.stringify(data);
        break;
    }

    var request = new Request(path, {
      headers: new Headers(headers),
      method: method,
      body: newData,
      credentials: 'include'
    });
    return fetch(request).then(function (res) {
      // console.log(res.text());
      return res.status === 500 ? Promise.reject(res) : res;
    });
  }

  function replace(key, node, widgets, uiSchema, path) {
    if (node && node.format && widgets[node.format]) {
      if (key) {
        uiSchema[key] = widgets[node.format];
      } else {
        Object.assign(uiSchema, widgets[node.format]);
      }
    } else if (node.items) {
      if (node.items.format && widgets[node.items.format]) {
        uiSchema.items = widgets[node.items.format];
      } else {
        uiSchema.items = {};
        replace('items', node.items, widgets, uiSchema.items);
      }
    } else if (node.properties) {
      Object.keys(node.properties).forEach(function (k) {
        uiSchema[k] = {};
        var newNode = node.properties[k];

        if (newNode.format && widgets[newNode.format]) {
          uiSchema[k] = widgets[newNode.format];
        } else {
          replace(k, node.properties[k], widgets, uiSchema[k]);
        }
      });
    }
  }

  function generateUISchema(schema, widgets) {
    var uiSchema = {};
    replace(null, schema, widgets, uiSchema, []);
    return uiSchema;
  }

  function alphaSort(a, b) {
    return a > b ? 1 : a < b ? -1 : 0;
  }

  var GeoPosition =
  /*#__PURE__*/
  function (_React$Component) {
    _inherits(GeoPosition, _React$Component);

    function GeoPosition(props) {
      var _this;

      _classCallCheck(this, GeoPosition);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(GeoPosition).call(this, props));
      _this.state = _objectSpread({}, props.formData);
      return _this;
    }

    _createClass(GeoPosition, [{
      key: "_onChange",
      value: function _onChange(name) {
        var _this2 = this;

        return function (event) {
          var data = event.target.value;
          var float = parseFloat(data);

          if (!isNaN(float) || data === "") {
            _this2.setState(_defineProperty({}, name, float), function () {
              return _this2.props.onChange(_this2.state);
            });
          }
        };
      }
    }, {
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(newProps) {
        this.setState(_objectSpread({}, newProps.formData));
      }
    }, {
      key: "render",
      value: function render() {
        var _this$state = this.state,
            latitude = _this$state.latitude,
            longitude = _this$state.longitude;
        return React__default.createElement("div", {
          className: "field-group"
        }, React__default.createElement("label", null, "Lat"), React__default.createElement("input", {
          type: "number",
          step: "any",
          value: latitude,
          onChange: this._onChange("latitude")
        }), React__default.createElement("label", null, "Lon"), React__default.createElement("input", {
          type: "number",
          step: "any",
          value: longitude,
          onChange: this._onChange("longitude")
        }));
      }
    }]);

    return GeoPosition;
  }(React__default.Component);

  var MarkupField =
  /*#__PURE__*/
  function (_React$Component) {
    _inherits(MarkupField, _React$Component);

    function MarkupField(props) {
      var _this;

      _classCallCheck(this, MarkupField);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(MarkupField).call(this, props));
      _this.state = {
        text: props.formData,
        activeTab: 0
      };
      _this.tabs = ['Text', 'HTML'];
      return _this;
    }

    _createClass(MarkupField, [{
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(newProps) {
        this.setState({
          text: newProps.formData
        });
      }
    }, {
      key: "_onChange",
      value: function _onChange(text) {
        this.setState({
          text: text
        });
        this.props.onChange(text === '' ? undefined : text);
      }
    }, {
      key: "_onTextareaChange",
      value: function _onTextareaChange(e) {
        this._onChange(e.target.value);
      }
    }, {
      key: "_changeTab",
      value: function _changeTab(activeTab) {
        this.setState({
          activeTab: activeTab
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var activeTab = this.state.activeTab;
        return React__default.createElement("div", {
          className: "field-markup"
        }, React__default.createElement("nav", {
          className: "tabs"
        }, this.tabs.map(function (t, i) {
          return React__default.createElement("a", {
            key: i,
            className: activeTab === i ? 'active' : '',
            onClick: function onClick() {
              return _this2._changeTab(i);
            }
          }, t);
        })), activeTab === 0 && React__default.createElement("div", {
          className: "tab-container"
        }, React__default.createElement(Editor, {
          text: this.state.text,
          onChange: this._onChange.bind(this),
          options: {
            toolbar: {
              buttons: ['bold', 'italic', 'anchor', 'underline', 'quote', 'unorderedlist']
            }
          }
        })), activeTab === 1 && React__default.createElement("div", {
          className: "tab-container"
        }, React__default.createElement("textarea", {
          value: this.state.text,
          onChange: this._onTextareaChange.bind(this)
        })));
      }
    }]);

    return MarkupField;
  }(React__default.Component);

  var ArrayItem =
  /*#__PURE__*/
  function (_Component) {
    _inherits(ArrayItem, _Component);

    function ArrayItem(props) {
      var _this;

      _classCallCheck(this, ArrayItem);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(ArrayItem).call(this, props));
      _this.state = {
        collapsed: true,
        title: _this._getTitle(props)
      };
      return _this;
    }

    _createClass(ArrayItem, [{
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(newProps) {
        this.setState({
          title: this._getTitle(newProps)
        });
      }
    }, {
      key: "_getTitle",
      value: function _getTitle(props) {
        var _props$element$childr = props.element.children.props,
            formData = _props$element$childr.formData,
            schema = _props$element$childr.schema;
        var title = formData && formData.title && typeof formData.title === 'string' ? formData.title : schema.title || schema.type;
        var useAsTitle = schema.useAsTitle;

        if (useAsTitle) {
          try {
            var tmpTitle = useAsTitle.split('.').reduce(function (a, b) {
              return a && a[b] ? a[b] : null;
            }, formData);

            if (tmpTitle) {
              title = tmpTitle.length > 35 ? tmpTitle.substring(0, 35) + '...' : tmpTitle;
            }
          } catch (e) {
            console.warn(e);
          }
        }

        return title;
      }
    }, {
      key: "toggleCollapsed",
      value: function toggleCollapsed() {
        this.setState({
          collapsed: !this.state.collapsed
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var element = this.props.element;
        var _element$children$pro = element.children.props,
            formData = _element$children$pro.formData,
            schema = _element$children$pro.schema;
        var useAsTitle = schema.useAsTitle,
            type = schema.type;
        var canCollapse = true;
        var cls = this.state.collapsed && canCollapse ? 'field-wrapper array collapsed' : 'array field-wrapper';
        var action = this.state.collapsed ? 'Edit' : 'Collapse';
        var children = React__default.cloneElement(element.children, {
          isInArray: true
        });
        var title = this.state.title;
        return React__default.createElement("div", {
          className: cls
        }, React__default.createElement("div", {
          className: "array-item-header"
        }, React__default.createElement("p", {
          className: "header-button",
          onClick: function onClick() {
            return _this2.toggleCollapsed();
          }
        }, element.index + 1, ". ", title, React__default.createElement("span", null, this.state.collapsed ? '[ + ]' : '[ - ]')), React__default.createElement("div", {
          className: "tools"
        }, element.hasMoveDown && React__default.createElement("button", {
          className: "icon btn-down",
          onClick: element.onReorderClick(element.index, element.index + 1)
        }, React__default.createElement("svg", {
          viewBox: "0,0,318,318",
          width: "318",
          height: "318",
          xmlns: "http://www.w3.org/2000/svg"
        }, React__default.createElement("path", {
          d: "M159 0l159 106-26.5 37.1-106-68.9V318h-53V74.2l-106 68.9L0 106 159 0z",
          strokeMiterlimit: "10"
        }))), element.hasMoveUp && React__default.createElement("button", {
          className: "icon btn-up",
          onClick: element.onReorderClick(element.index, element.index - 1)
        }, React__default.createElement("svg", {
          viewBox: "0,0,318,318",
          width: "318",
          height: "318",
          xmlns: "http://www.w3.org/2000/svg"
        }, React__default.createElement("path", {
          d: "M159 0l159 106-26.5 37.1-106-68.9V318h-53V74.2l-106 68.9L0 106 159 0z",
          strokeMiterlimit: "10"
        }))), React__default.createElement("button", {
          type: "icon button",
          className: "orange btn-delete",
          onClick: element.onDropIndexClick(element.index)
        }, React__default.createElement("svg", {
          viewBox: "0,0,330,330",
          width: "330",
          height: "330",
          xmlns: "http://www.w3.org/2000/svg"
        }, React__default.createElement("path", {
          d: "M0 66l99 99-99 99 66 66 99-99 99 99 66-66-99-99 99-99-66-66-99 99L66 0z",
          strokeMiterlimit: "10"
        }))))), !this.state.collapsed && children);
      }
    }]);

    return ArrayItem;
  }(React.Component);

  var ArrayFieldTemplate =
  /*#__PURE__*/
  function (_Component) {
    _inherits(ArrayFieldTemplate, _Component);

    function ArrayFieldTemplate(props) {
      var _this;

      _classCallCheck(this, ArrayFieldTemplate);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(ArrayFieldTemplate).call(this, props));
      _this.state = {
        collapsed: false
      };
      return _this;
    }

    _createClass(ArrayFieldTemplate, [{
      key: "_toggleCollapsed",
      value: function _toggleCollapsed() {
        this.setState({
          collapsed: !this.state.collapsed
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var props = this.props;
        var title = props.title;
        var isRoot = props.idSchema.$id === 'root';
        return React__default.createElement("div", {
          className: props.className + (isRoot ? ' root' : '')
        }, React__default.createElement("p", {
          onClick: function onClick() {
            return _this2._toggleCollapsed();
          },
          className: "header-button"
        }, React__default.createElement("label", null, title, " (", props.items.length, ")"), !!props.items.length && React__default.createElement("span", null, this.state.collapsed ? '[ + ]' : '[ - ]')), props.items && !this.state.collapsed && props.items.map(function (element) {
          return React__default.createElement(ArrayItem, {
            key: element.index,
            element: element
          });
        }), React__default.createElement("div", null, React__default.createElement("button", {
          className: "no-style",
          onClick: props.onAddClick,
          type: "button"
        }, "+ Add ", props.schema.items.title)));
      }
    }]);

    return ArrayFieldTemplate;
  }(React.Component);

  function X(props) {
    return React__default.createElement("svg", {
      viewBox: "0,0,246,246",
      width: "246",
      height: "246",
      xmlns: "http://www.w3.org/2000/svg"
    }, React__default.createElement("path", {
      d: "M0 41l82 82-82 82 41 41 82-82 82 82 41-41-82-82 82-82-41-41-82 82L41 0z",
      strokeMiterlimit: "10"
    }));
  }

  var Icon = {
    X: X
  };

  var Fragment = React__default.Fragment;

  var AssetPreview = function AssetPreview(props) {
    var _ref = props.asset || {},
        isImage = _ref.isImage,
        name = _ref.name,
        ext = _ref.ext;

    return props.asset ? React__default.createElement("div", {
      className: "asset-preview"
    }, isImage ? React__default.createElement("img", {
      src: "/image/thumb/".concat(name)
    }) : React__default.createElement("div", {
      className: "asset-icon"
    }, ext), props.children) : React__default.createElement("p", null, React__default.createElement("strong", null, "?"));
  };

  var Asset$1 = function Asset(props) {
    var asset = props.asset,
        selected = props.selected,
        deleteAsset = props.deleteAsset,
        selectAsset = props.selectAsset;
    var mime = asset.mime,
        name = asset.name,
        ext = asset.ext;
    var isImage = mime && mime.includes('image');
    return React__default.createElement("div", {
      className: "asset-item ".concat(selected ? 'selected' : '')
    }, React__default.createElement(AssetPreview, {
      asset: asset
    }, React__default.createElement("div", {
      className: "hover-preview"
    }, React__default.createElement("button", {
      type: "button",
      className: "delete-file",
      onClick: deleteAsset
    }, React__default.createElement(Icon.X, null)), React__default.createElement("img", {
      src: "/image/thumb/".concat(name)
    }), React__default.createElement("p", null, name), React__default.createElement("button", {
      disabled: selected,
      type: "button",
      className: "small",
      onClick: selectAsset
    }, selected ? 'Selected' : 'Select'))), React__default.createElement("p", {
      title: name,
      className: "file-title"
    }, name), React__default.createElement("button", {
      disabled: selected,
      type: "button",
      className: "small",
      onClick: selectAsset
    }, selected ? 'Selected' : 'Select'));
  };

  var Fragment$1 = React__default.Fragment;

  var AssetManager =
  /*#__PURE__*/
  function (_Component) {
    _inherits(AssetManager, _Component);

    function AssetManager(props) {
      var _this;

      _classCallCheck(this, AssetManager);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(AssetManager).call(this, props));
      _this.state = {
        isUploading: false,
        assets: null,
        selectedAsset: props.selectedAsset || null,
        searchStr: '',
        searchAssets: [],
        sortBy: 'name'
      };
      return _this;
    }

    _createClass(AssetManager, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this._getAssets();
      }
    }, {
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(newProps) {
        this.setState({
          selectedAsset: newProps.selectedAsset
        });
      }
    }, {
      key: "_getAssets",
      value: function _getAssets() {
        var _this2 = this;

        return Fetch('/admin/data/asset').then(function (res) {
          return res.json();
        }).then(function (assets) {
          _this2._sortAssets(assets);
        }).catch(function (err) {
          Notify.alert(err);
        });
      }
    }, {
      key: "_selectAsset",
      value: function _selectAsset(selectedAsset) {
        this.setState({
          selectedAsset: selectedAsset
        });
        this.props.onSelect && this.props.onSelect(selectedAsset);
      }
    }, {
      key: "_deleteAsset",
      value: function _deleteAsset(asset) {
        var _this3 = this;

        var confirm = window.confirm('Are you sure you want to delete this file?');

        if (confirm) {
          Fetch('/admin/data/asset', 'DELETE', {
            asset: asset.name
          }).then(function (res) {
            if (res.status === 200) {
              _this3._getAssets();

              Notify.message('Asset deleted');
            } else {
              Notify.alert('Problem deleting asset');
            }
          });
        }
      }
    }, {
      key: "_sortAssets",
      value: function _sortAssets(assets) {
        var sortBy = this.state.sortBy;
        assets = assets || this.state.assets;
        var sortedAssets = assets.sort(function (a, b) {
          return a[sortBy] > b[sortBy] ? 1 : a[sortBy] < b[sortBy] ? -1 : 0;
        });
        this.setState({
          assets: sortedAssets
        });
      }
    }, {
      key: "_search",
      value: function _search(str) {
        var regEx = new RegExp(str);
        var searchAssets = this.state.assets.filter(function (f) {
          return regEx.test(f.name);
        });
        this.setState({
          searchStr: str,
          searchAssets: searchAssets
        });
      }
    }, {
      key: "_clearSearch",
      value: function _clearSearch() {
        this.setState({
          searchStr: null,
          searchAssets: []
        });
      }
    }, {
      key: "_onDrop",
      value: function _onDrop(files) {
        var _this4 = this;

        if (!this.state.isUploading) {
          this.setState({
            isUploading: true
          }, function () {
            files.forEach(function (f) {
              Fetch('/admin/data/asset', 'POST', f, 'formData').then(function (res) {
                if (res.status === 200) {
                  _this4._getAssets();

                  Notify.message('File uploaded');
                } else {
                  Notify.alert('Problem uploading file');
                }
              }).catch(function (error) {
                console.log(error);
                Notify.alert(error);
              }).finally(function () {
                _this4.setState({
                  isUploading: false
                });
              });
            });
          });
        }
      }
    }, {
      key: "_updateSort",
      value: function _updateSort(e) {
        this.setState({
          sortBy: e.target.value
        }, this._sortAssets);
      }
    }, {
      key: "render",
      value: function render() {
        var _this5 = this;

        var _this$state = this.state,
            isUploading = _this$state.isUploading,
            assets = _this$state.assets,
            selectedAsset = _this$state.selectedAsset,
            searchAssets = _this$state.searchAssets,
            searchStr = _this$state.searchStr,
            sortBy = _this$state.sortBy;
        var assetsResult = searchStr ? searchAssets : assets;
        var noResult = searchStr ? "No results for '".concat(searchStr, "'") : 'No files';
        return React__default.createElement(Fragment$1, null, React__default.createElement("div", {
          className: "asset-actions"
        }, React__default.createElement("label", null, React__default.createElement("input", {
          type: "text",
          placeholder: "Search for...",
          value: this.state.searchStr,
          onChange: function onChange(e) {
            return _this5._search(e.target.value);
          }
        }), React__default.createElement("button", {
          type: "button",
          onClick: function onClick() {
            return _this5._clearSearch();
          }
        }, "Clear")), React__default.createElement("label", null, "Sort by:"), React__default.createElement("label", {
          htmlFor: "sort-name"
        }, React__default.createElement("input", {
          id: "sort-name",
          type: "radio",
          name: "sort-group",
          value: "name",
          checked: sortBy === 'name',
          onChange: function onChange(e) {
            return _this5._updateSort(e);
          }
        }), "Name"), React__default.createElement("label", {
          htmlFor: "sort-created"
        }, React__default.createElement("input", {
          id: "sort-created",
          type: "radio",
          name: "sort-group",
          value: "created",
          checked: sortBy === 'created',
          onChange: function onChange(e) {
            return _this5._updateSort(e);
          }
        }), "Date")), assetsResult ? React__default.createElement("div", {
          className: "asset-table"
        }, !assetsResult.length && React__default.createElement("p", null, noResult), assetsResult.map(function (asset, i) {
          return React__default.createElement(Asset$1, {
            key: i,
            asset: asset,
            selected: selectedAsset && selectedAsset.name === asset.name,
            selectAsset: function selectAsset() {
              return _this5._selectAsset(asset);
            },
            deleteAsset: function deleteAsset() {
              return _this5._deleteAsset(asset);
            }
          });
        })) : React__default.createElement(MiniLoader, null), React__default.createElement(DropZone, {
          onDrop: function onDrop(files) {
            return _this5._onDrop(files);
          },
          className: "drop-zone"
        }, isUploading ? React__default.createElement(MiniLoader, null) : React__default.createElement("p", null, "Upload file/s")));
      }
    }]);

    return AssetManager;
  }(React.Component);
  // key={f._id}
  // deleteFile={() => this.deleteFile(f)}
  // {!isUploading && (
  //     <button onClick={() => this._hide()}>Done</button>
  // )}

  var Modal = (function (props) {
    var classes = props.full ? 'modal-full' : '';
    return props.isVisible ? React__default.createElement("div", {
      id: "overlay"
    }, React__default.createElement("div", {
      id: "modal",
      className: classes
    }, props.close && React__default.createElement("button", {
      type: "button",
      className: "close-modal",
      onClick: props.close
    }, React__default.createElement(Icon.X, null)), props.children)) : null;
  });

  var Asset$2 =
  /*#__PURE__*/
  function (_Component) {
    _inherits(Asset, _Component);

    function Asset(props) {
      var _this;

      _classCallCheck(this, Asset);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(Asset).call(this, props));
      _this.state = {
        value: props.formData,
        selectingAsset: false,
        asset: null
      };
      return _this;
    }

    _createClass(Asset, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        if (this.state.value) {
          this._getAssetInfo();
        }
      }
    }, {
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(newProps) {
        var _this2 = this;

        if (newProps.formData !== this.state.value) {
          this.setState({
            value: newProps.formData,
            asset: null
          }, function () {
            console.log('New props getting infop');

            _this2._getAssetInfo();
          });
        }
      }
    }, {
      key: "_getAssetInfo",
      value: function _getAssetInfo() {
        var _this3 = this;

        Fetch("/admin/data/asset/".concat(this.state.value)).then(function (res) {
          if (res.status === 200) {
            return res.json();
          }
        }).then(function (info) {
          _this3.setState({
            asset: info
          });
        }).catch(function (err) {
          console.log(err);
        });
      }
    }, {
      key: "_onChange",
      value: function _onChange(value) {
        this.setState({
          value: value
        });
        this.props.onChange(value === '' ? undefined : value);
      }
    }, {
      key: "_toggleAssetManager",
      value: function _toggleAssetManager() {
        var show = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
        this.setState({
          selectingAsset: show
        });
      }
    }, {
      key: "_selectAsset",
      value: function _selectAsset(asset) {
        var _this4 = this;

        this.setState({
          asset: asset,
          value: asset.name
        }, function () {
          return _this4.props.onChange(_this4.state.value);
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _this5 = this;

        var _this$state = this.state,
            value = _this$state.value,
            selectingAsset = _this$state.selectingAsset,
            asset = _this$state.asset;
        var created = asset && moment(asset.ctime).format('ddd DD MMM YYYY h:mma');
        return React__default.createElement("div", {
          className: "asset flex-row"
        }, React__default.createElement(AssetPreview, {
          asset: asset
        }), asset && React__default.createElement("div", null, React__default.createElement("p", null, React__default.createElement("strong", null, value), React__default.createElement("br", null), "Type: ", asset.mime || 'unknown', " ", React__default.createElement("br", null), "Filesize: ", asset.size, " ", React__default.createElement("br", null), "Created: ", created)), React__default.createElement("button", {
          type: "button",
          onClick: function onClick() {
            return _this5._toggleAssetManager();
          }
        }, "Select asset"), React__default.createElement(Modal, {
          full: true,
          isVisible: selectingAsset
        }, React__default.createElement("h2", null, "Select asset"), React__default.createElement(AssetManager, {
          selectedAsset: asset,
          onSelect: function onSelect(asset) {
            return _this5._selectAsset(asset);
          }
        }), React__default.createElement("button", {
          type: "button",
          onClick: function onClick() {
            return _this5._toggleAssetManager(false);
          }
        }, "Done")));
      }
    }]);

    return Asset;
  }(React.Component);

  var Fragment$2 = React__default.Fragment;

  var CustomFieldTemplate =
  /*#__PURE__*/
  function (_Component) {
    _inherits(CustomFieldTemplate, _Component);

    function CustomFieldTemplate(props) {
      var _this;

      _classCallCheck(this, CustomFieldTemplate);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(CustomFieldTemplate).call(this, props));
      var type = props.schema.type;
      var isObject = type === 'object';
      var isRoot = props.id === 'root'; // Figure out way to have all collapsed except array items

      _this.state = {
        collapsed: props.children.props.isInArray ? false : isObject && !isRoot,
        type: type,
        isObject: type === 'object',
        isArray: type === 'array',
        isRoot: isRoot
      };
      return _this;
    }

    _createClass(CustomFieldTemplate, [{
      key: "_toggleCollapsed",
      value: function _toggleCollapsed() {
        this.setState({
          collapsed: !this.state.collapsed
        });
      }
    }, {
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(newProps) {
        var type = newProps.schema.type;
        this.setState({
          type: type,
          isObject: type === 'object',
          isArray: type === 'array',
          isRoot: newProps.id === 'root'
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var _this$props = this.props,
            id = _this$props.id,
            classNames = _this$props.classNames,
            label = _this$props.label,
            help = _this$props.help,
            required = _this$props.required,
            description = _this$props.description,
            errors = _this$props.errors,
            children = _this$props.children;
        var _this$state = this.state,
            collapsed = _this$state.collapsed,
            isObject = _this$state.isObject,
            isArray = _this$state.isArray,
            isRoot = _this$state.isRoot,
            type = _this$state.type;
        var formData = children.props.formData;
        var showTitle = !isArray || isObject;

        if (type === 'boolean') {
          showTitle = false;
        }

        var Title = React__default.createElement("label", {
          htmlFor: id
        }, label, required ? '*' : null);

        if (isObject && !isRoot) {
          Title = React__default.createElement("label", {
            className: "object-title",
            htmlFor: id,
            onClick: function onClick() {
              return _this2._toggleCollapsed();
            }
          }, label);
        }

        return React__default.createElement("div", {
          className: "".concat(classNames, " ").concat(collapsed ? 'collapsed' : '')
        }, showTitle && Title, !collapsed && React__default.createElement(Fragment$2, null, description, children, errors, help));
      }
    }]);

    return CustomFieldTemplate;
  }(React.Component);

  var DateField =
  /*#__PURE__*/
  function (_React$Component) {
    _inherits(DateField, _React$Component);

    function DateField(props) {
      var _this;

      _classCallCheck(this, DateField);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(DateField).call(this, props));
      var formData = props.formData;
      var date = formData ? moment(formData) : null;
      _this.state = {
        date: date
      };

      _this.onChange(date);

      return _this;
    }

    _createClass(DateField, [{
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(newProps) {
        this.setState({
          date: newProps.formData ? moment(newProps.formData) : null
        });
      }
    }, {
      key: "onChange",
      value: function onChange(value) {
        this.setState({
          date: value
        });
        this.props.onChange(value ? value.format('Y-MM-DD') : undefined);
      }
    }, {
      key: "render",
      value: function render() {
        return React__default.createElement("div", {
          className: "field-group"
        }, React__default.createElement("label", null, this.props.label), React__default.createElement(DatePicker, {
          dateFormat: "DD/MM/YYYY",
          timeIntervals: 30,
          selected: this.state.date,
          onChange: this.onChange.bind(this)
        }));
      }
    }]);

    return DateField;
  }(React__default.Component);

  var Date$1 =
  /*#__PURE__*/
  function (_React$Component) {
    _inherits(Date, _React$Component);

    function Date(props) {
      var _this;

      _classCallCheck(this, Date);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(Date).call(this, props));
      var date = moment(_this.props.formData);
      _this.state = {
        date: date
      };
      return _this;
    }

    _createClass(Date, [{
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(newProps) {
        this.setState({
          date: moment(newProps.formData)
        });
      }
    }, {
      key: "onChange",
      value: function onChange(value) {
        this.setState({
          date: value
        });
        this.props.onChange(value.format());
      }
    }, {
      key: "render",
      value: function render() {
        return React__default.createElement("div", {
          className: "field-group"
        }, React__default.createElement(DatePicker, {
          label: this.props.label,
          dateFormat: "LLL",
          showTimeSelect: true,
          timeIntervals: 30,
          selected: this.state.date,
          onChange: this.onChange.bind(this)
        }));
      }
    }]);

    return Date;
  }(React__default.Component);

  var _location$pathname$sp = location.pathname.split('/'),
      _location$pathname$sp2 = _slicedToArray(_location$pathname$sp, 5),
      siloName = _location$pathname$sp2[3],
      node = _location$pathname$sp2[4];

  var ImageField =
  /*#__PURE__*/
  function (_Component) {
    _inherits(ImageField, _Component);

    function ImageField(props) {
      var _this;

      _classCallCheck(this, ImageField);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(ImageField).call(this, props));
      console.log('Image', props);
      _this.state = {
        files: null,
        searchFiles: null,
        data: props.formData || {},
        modalIsVisible: false,
        searchStr: '',
        isUploading: false
      };
      return _this;
    }

    _createClass(ImageField, [{
      key: "onChange",
      value: function onChange(name) {
        var _this2 = this;

        return function (event) {
          _this2.setState({
            data: _objectSpread({}, _this2.state.data, _defineProperty({}, name, event.target.value))
          }, function () {
            return _this2.props.onChange(_this2.state.data);
          });
        };
      }
    }, {
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(newProps) {
        this.setState({
          data: newProps.formData
        });
      }
    }, {
      key: "selectFile",
      value: function selectFile(f) {
        var _this3 = this;

        this.setState({
          data: _objectSpread({}, this.state.data, {
            src: f.filename
          })
        }, function () {
          return _this3.props.onChange(_this3.state.data);
        });
      }
    }, {
      key: "deleteFile",
      value: function deleteFile(f) {
        var _this4 = this;

        var confirm = window.confirm('Are you sure you want to delete this file?');

        if (confirm) {
          Fetch("".concat(clientSettings.filesEndpoint, "/").concat(siloName), 'DELETE', {
            fileId: f._id
          }).then(function (res) {
            if (res.status === 200) {
              _this4.getFiles();

              Notify.message('File deleted');
            } else {
              Notify.alert('Problem deleting file');
            }
          }).catch(function (error) {
            console.error(error);
            Notify.alert('Problem deleting file');
          });
        }
      }
    }, {
      key: "hideModal",
      value: function hideModal() {
        this.setState({
          modalIsVisible: false
        });
      }
    }, {
      key: "getFiles",
      value: function getFiles() {
        var _this5 = this;

        return Fetch("".concat(clientSettings.filesEndpoint)).then(function (res) {
          return res.json();
        }).then(function (res) {
          console.log(res);

          _this5.setState({
            files: res
          });
        }).catch(function (err) {
          Notify.alert(err);
        });
      }
    }, {
      key: "showModal",
      value: function showModal() {
        var _this6 = this;

        this.getFiles().then(function () {
          _this6.setState({
            modalIsVisible: true
          });
        });
      }
    }, {
      key: "remove",
      value: function remove(name) {
        var _this7 = this;

        this.setState({
          data: {}
        }, function () {
          return _this7.props.onChange(_this7.state);
        });
      }
    }, {
      key: "onDrop",
      value: function onDrop(files) {
        var _this8 = this;

        if (!this.state.isUploading) {
          this.setState({
            isUploading: true
          }, function () {
            files.forEach(function (f) {
              Fetch("".concat(clientSettings.filesEndpoint, "/").concat(siloName), 'POST', f, 'formData').then(function (res) {
                if (res.status === 200) {
                  _this8.getFiles();

                  Notify.message('File uploaded');
                } else {
                  Notify.alert('Problem uploading file');
                }
              }).catch(function (error) {
                console.log(error);
                Notify.alert(error);
              }).finally(function () {
                _this8.setState({
                  isUploading: false
                });
              });
            });
          });
        }
      }
    }, {
      key: "search",
      value: function search(str) {
        var regEx = new RegExp(str);
        var searchFiles = this.state.files.filter(function (f) {
          return regEx.test(f.originalname);
        });
        this.setState({
          searchStr: str,
          searchFiles: searchFiles
        });
      }
    }, {
      key: "clearSearch",
      value: function clearSearch() {
        this.setState({
          searchStr: '',
          searchFiles: []
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _this9 = this;

        var _this$state$data = this.state.data,
            src = _this$state$data.src,
            alt = _this$state$data.alt,
            title = _this$state$data.title,
            caption = _this$state$data.caption,
            credit = _this$state$data.credit;
        var _this$state = this.state,
            searchStr = _this$state.searchStr,
            isUploading = _this$state.isUploading;
        var files = searchStr ? this.state.searchFiles : this.state.files;
        var noResult = searchStr ? "No results for '".concat(searchStr, "'") : 'No files';
        return React__default.createElement("div", {
          className: "field-image"
        }, React__default.createElement("div", {
          className: "preview"
        }, React__default.createElement("div", {
          className: "image"
        }, src ? React__default.createElement("img", {
          src: "".concat(clientSettings.fileEndpoint, "/thumbs/").concat(src),
          alt: "",
          height: "100",
          title: ""
        }) : React__default.createElement("p", null, "No image selected")), React__default.createElement("input", {
          "data-type": "image",
          type: "text",
          value: src || '',
          readOnly: true
        }), React__default.createElement("div", {
          className: "button-group"
        }, React__default.createElement("button", {
          type: "button",
          onClick: this.showModal.bind(this)
        }, "Select image"), React__default.createElement("button", {
          type: "button",
          onClick: function onClick() {
            return _this9.remove();
          }
        }, "Remove"))), React__default.createElement("div", {
          className: "info"
        }, React__default.createElement("div", {
          className: "form-group"
        }, React__default.createElement("label", null, "Alternative text"), React__default.createElement("input", {
          className: "form-control",
          type: "text",
          value: alt || '',
          onChange: this.onChange('alt')
        })), React__default.createElement("div", {
          className: "form-group"
        }, React__default.createElement("label", null, "Title"), React__default.createElement("input", {
          className: "form-control",
          type: "text",
          value: title || '',
          onChange: this.onChange('title')
        })), React__default.createElement("div", {
          className: "form-group"
        }, React__default.createElement("label", null, "Caption"), React__default.createElement("textarea", {
          className: "form-control",
          type: "text",
          value: caption || '',
          onChange: this.onChange('caption')
        })), React__default.createElement("div", {
          className: "form-group"
        }, React__default.createElement("label", null, "Credit"), React__default.createElement("textarea", {
          className: "form-control",
          type: "text",
          value: credit || '',
          onChange: this.onChange('credit')
        }))), React__default.createElement(Modal, {
          close: !isUploading && this.hideModal.bind(this),
          full: true,
          isVisible: this.state.modalIsVisible
        }, React__default.createElement("h2", null, "Select Image"), React__default.createElement("div", {
          className: "image-actions"
        }, React__default.createElement("label", null, React__default.createElement("input", {
          type: "text",
          placeholder: "Search for...",
          value: this.state.searchStr,
          onChange: function onChange(e) {
            return _this9.search(e.target.value);
          }
        }), React__default.createElement("button", {
          type: "button",
          onClick: function onClick() {
            return _this9.clearSearch();
          }
        }, "Clear"))), !files && React__default.createElement(MiniLoader, null), !!files && React__default.createElement("div", {
          className: "asset-table"
        }, !files.length && React__default.createElement("p", null, noResult), files.map(function (f, i) {
          return React__default.createElement(Asset, {
            f: f,
            selectFile: function selectFile() {
              return _this9.selectFile(f);
            },
            isSelected: src === f.filename,
            key: f._id,
            deleteFile: function deleteFile() {
              return _this9.deleteFile(f);
            }
          });
        })), React__default.createElement(DropZone, {
          onDrop: this.onDrop.bind(this),
          className: "drop-zone"
        }, isUploading ? React__default.createElement(MiniLoader, null) : React__default.createElement("p", null, "Upload new image/s")), !isUploading && React__default.createElement("button", {
          onClick: this.hideModal.bind(this)
        }, "Done")));
      }
    }]);

    return ImageField;
  }(React.Component);

  var Sidebar = reactRouterDom.withRouter(function (props) {
    var route = props.route,
        schemas = props.schemas;
    return React__default.createElement("section", {
      id: "sidebar"
    }, React__default.createElement("header", null, React__default.createElement("h3", null, "Content")), React__default.createElement("nav", null, (schemas || []).sort(alphaSort).map(function (c) {
      var className = c === route ? 'active' : '';
      return React__default.createElement(reactRouterDom.NavLink, {
        key: c,
        className: className,
        to: "/admin/content/".concat(c)
      }, c);
    })), React__default.createElement("header", null, React__default.createElement("h3", null, "Manage")), React__default.createElement("nav", null, React__default.createElement(reactRouterDom.NavLink, {
      to: "/admin/manage/assets"
    }, "Assets"), !!user.isAdmin && React__default.createElement(reactRouterDom.NavLink, {
      to: "/admin/manage/users"
    }, "Users")));
  });

  var AssetsView =
  /*#__PURE__*/
  function (_Component) {
    _inherits(AssetsView, _Component);

    function AssetsView(props) {
      var _this;

      _classCallCheck(this, AssetsView);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(AssetsView).call(this, props));
      _this.state = {};
      return _this;
    }

    _createClass(AssetsView, [{
      key: "render",
      value: function render() {
        return React__default.createElement("section", null, React__default.createElement("header", null, React__default.createElement("h2", null, "Assets")), React__default.createElement(AssetManager, null));
      }
    }]);

    return AssetsView;
  }(React.Component);

  var Fragment$3 = React__default.Fragment;

  var CustomSchemaField =
  /*#__PURE__*/
  function (_React$Component) {
    _inherits(CustomSchemaField, _React$Component);

    function CustomSchemaField(props) {
      _classCallCheck(this, CustomSchemaField);

      return _possibleConstructorReturn(this, _getPrototypeOf(CustomSchemaField).call(this, props));
    }

    _createClass(CustomSchemaField, [{
      key: "render",
      value: function render() {
        var formData = this.props.formData;
        var title = formData && formData.title || this.props.schema.title || this.props.schema.type;
        return React__default.createElement(SchemaField, this.props);
      }
    }]);

    return CustomSchemaField;
  }(React__default.Component);

  var fields = {
    image: ImageField,
    date: DateField,
    dateTime: Date$1,
    asset: Asset$2,
    markup: MarkupField,
    geo: GeoPosition // TitleField: CustomTitleField,
    // SchemaField: CustomSchemaField,

  };
  var uiFields = {
    asset: {
      'ui:field': 'asset'
    },
    image: {
      'ui:field': 'image'
    },
    'date-time': {
      'ui:field': 'dateTime'
    },
    date: {
      'ui:field': 'date'
    },
    markup: {
      'ui:field': 'markup'
    },
    geo: {
      'ui:field': 'geo'
    },
    checkboxes: {
      'ui:widget': 'checkboxes'
    }
  };

  var ContentForm =
  /*#__PURE__*/
  function (_Component) {
    _inherits(ContentForm, _Component);

    function ContentForm(props) {
      var _this;

      _classCallCheck(this, ContentForm);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(ContentForm).call(this, props));
      _this.state = {};
      return _this;
    }

    _createClass(ContentForm, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            schema = _this$props.schema,
            data = _this$props.data,
            onSubmit = _this$props.onSubmit,
            meta = _this$props.meta;
        var modified = moment(meta.modified).format('ddd D MMM YYYY h:mma');
        var uiSchema = generateUISchema(schema, uiFields);
        return React__default.createElement("section", {
          className: "nodes"
        }, React__default.createElement("header", null, React__default.createElement("h2", null, schema.title), React__default.createElement("p", {
          className: "modified"
        }, "Last modified: ", modified)), React__default.createElement(Form, {
          schema: schema,
          formData: data,
          uiSchema: uiSchema,
          fields: fields,
          ArrayFieldTemplate: ArrayFieldTemplate,
          FieldTemplate: CustomFieldTemplate,
          onSubmit: onSubmit,
          onError: console.log
        }, React__default.createElement("button", {
          type: "submit"
        }, "Save")));
      }
    }]);

    return ContentForm;
  }(React.Component);

  var ContentView =
  /*#__PURE__*/
  function (_Component) {
    _inherits(ContentView, _Component);

    function ContentView(props) {
      var _this;

      _classCallCheck(this, ContentView);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(ContentView).call(this, props));
      var resource = props.match.params.resource;
      _this.state = {
        meta: null,
        data: null,
        schema: null,
        resource: resource
      };

      if (resource) {
        _this._loadContent(resource);
      }

      return _this;
    }

    _createClass(ContentView, [{
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(newProps) {
        var _this2 = this;

        var resource = newProps.match.params.resource;

        if (this.state.resource !== resource) {
          store.set('isLoading', true);
          this.setState({
            resource: resource
          }, function () {
            _this2._loadContent(resource);
          });
        }
      }
    }, {
      key: "_loadContent",
      value: function _loadContent(resource) {
        var _this3 = this;

        Fetch("/api/".concat(resource, "?schema=true")).then(function (res) {
          return res.json();
        }).then(function (res) {
          _this3.setState({
            data: res.data || (res.schema.type === 'object' ? {} : []),
            meta: res.meta,
            schema: res.schema
          });
        }).catch(function (err) {
          console.log(err);
        }).finally(function () {
          store.set('isLoading', false);
        });
      }
    }, {
      key: "_saveContent",
      value: function _saveContent(data) {
        var _this4 = this;

        store.set('isLoading', true);
        Fetch("/api/".concat(this.state.resource), 'POST', {
          data: data.formData,
          meta: this.state.meta
        }).then(function (res) {
          if (res.status === 200) {
            Notify.message('Document saved');
          } else {
            Notify.alert('Problem saving document');
          }

          window.scrollTo(0, 0);

          _this4._loadContent(_this4.state.resource);
        }).catch(function (err) {
          if (err) {
            err.text().then(function (errText) {
              Notify.alert(errText || 'Problem saving document');
            });
          } else {
            Notify.alert('Problem saving document');
          }
        }).finally(function () {
          store.set('isLoading', false);
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _this5 = this;

        var _this$state = this.state,
            data = _this$state.data,
            meta = _this$state.meta,
            schema = _this$state.schema;
        return data ? React__default.createElement(ContentForm, {
          data: data,
          meta: meta,
          schema: schema,
          onSubmit: function onSubmit(data) {
            return _this5._saveContent(data);
          }
        }) : React__default.createElement(Loader, null);
      }
    }]);

    return ContentView;
  }(React.Component);

  var Fragment$4 = React__default.Fragment;

  var TokenGenerator =
  /*#__PURE__*/
  function (_React$Component) {
    _inherits(TokenGenerator, _React$Component);

    function TokenGenerator(props) {
      var _this;

      _classCallCheck(this, TokenGenerator);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(TokenGenerator).call(this, props));
      _this.state = {
        modalIsVisible: false,
        token: null,
        id: props.user || props.consumer
      };
      return _this;
    }

    _createClass(TokenGenerator, [{
      key: "_showModal",
      value: function _showModal() {
        this.setState({
          modalIsVisible: true
        });
      }
    }, {
      key: "_hideModal",
      value: function _hideModal() {
        this.setState({
          modalIsVisible: false
        });
      }
    }, {
      key: "_requestToken",
      value: function _requestToken() {
        var _this2 = this;

        store.set('isLoading', true);
        Fetch('/admin/data/token', 'POST', {
          id: this.state.id
        }).then(function (res) {
          return res.json();
        }).then(function (json) {
          _this2.setState({
            token: json.token,
            modalIsVisible: true
          });
        }).catch(function (err) {
          Notify.alert('Token request failed');
        }).finally(function () {
          store.set('isLoading', false);
        });
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.setState({
          token: null
        });
      }
    }, {
      key: "render",
      value: function render() {
        return React__default.createElement(Fragment$4, null, React__default.createElement("button", {
          className: "icon text",
          onClick: this._requestToken.bind(this)
        }, "Token"), React__default.createElement(Modal, {
          isVisible: this.state.modalIsVisible,
          close: this._hideModal.bind(this)
        }, React__default.createElement("h2", null, "Generate READ-ONLY api token"), this.state.token && React__default.createElement("textarea", {
          readOnly: true,
          value: this.state.token
        })));
      }
    }]);

    return TokenGenerator;
  }(React__default.Component);

  var Fragment$5 = React__default.Fragment;

  function UserRow(props) {
    var user = props.user,
        keys = props.keys;
    return React__default.createElement("tbody", null, React__default.createElement("tr", null, keys.map(function (k) {
      return React__default.createElement("td", {
        key: k
      }, user[k]);
    }), React__default.createElement("td", null, React__default.createElement("div", {
      className: "tools"
    }, React__default.createElement(TokenGenerator, {
      user: user.id
    }), React__default.createElement("button", {
      className: "icon text",
      onClick: function onClick() {
        return props.editUser(user);
      }
    }, "Edit"), React__default.createElement("button", {
      className: "btn-delete orange",
      onClick: function onClick() {
        return props.deleteUser(props.id, user.username);
      }
    }, React__default.createElement(Icon.X, null))))));
  }

  function RoleSelect(props) {
    var role = props.role;
    return React__default.createElement("div", null, React__default.createElement("label", null, "Role"), React__default.createElement("select", {
      value: props.role,
      id: role,
      onChange: function onChange(e) {
        return props.onChange(e.target.value);
      }
    }, React__default.createElement("option", {
      value: ""
    }, "Select a role"), React__default.createElement("option", {
      value: "1"
    }, "Read"), React__default.createElement("option", {
      value: "2"
    }, "ReadWrite"), React__default.createElement("option", {
      value: "3"
    }, "Admin")));
  }

  var UserForm =
  /*#__PURE__*/
  function (_React$Component) {
    _inherits(UserForm, _React$Component);

    function UserForm(props) {
      var _this;

      _classCallCheck(this, UserForm);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(UserForm).call(this, props));
      var user = props.user;
      _this.state = {
        username: user && user.username,
        email: user && user.email,
        admin: user && user.admin,
        role: user && user.role
      };
      return _this;
    }

    _createClass(UserForm, [{
      key: "_setState",
      value: function _setState(k, v) {
        this.setState(_defineProperty({}, k, v));
      }
    }, {
      key: "_submitUser",
      value: function _submitUser(e) {
        var _this$state = this.state,
            username = _this$state.username,
            email = _this$state.email,
            role = _this$state.role,
            admin = _this$state.admin,
            password = _this$state.password;
        var payload = {
          username: username,
          email: email,
          role: role,
          admin: !!admin
        };

        if (this.props.user) {
          payload.id = this.props.user.id;
        } else {
          payload.password = password;
        }

        this.props.submitUser(payload);
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var add = !this.props.user;
        var _this$state2 = this.state,
            username = _this$state2.username,
            email = _this$state2.email,
            admin = _this$state2.admin,
            role = _this$state2.role;
        return React__default.createElement("div", null, React__default.createElement("h2", null, add ? 'Add' : 'Edit', " user"), React__default.createElement("div", {
          className: "form-group"
        }, React__default.createElement("label", {
          htmlFor: "name"
        }, "Username"), React__default.createElement("input", {
          onChange: function onChange(e) {
            return _this2._setState('username', e.target.value);
          },
          type: "text",
          placeholder: "Username",
          autocomplete: "false",
          id: "username",
          defaultValue: username
        })), add && React__default.createElement("div", {
          className: "form-group"
        }, React__default.createElement("label", {
          htmlFor: "password"
        }, "Password"), React__default.createElement("input", {
          onChange: function onChange(e) {
            return _this2._setState('password', e.target.value);
          },
          autocomplete: "false",
          type: "password",
          placeholder: "Password",
          id: "password"
        })), React__default.createElement("div", {
          className: "form-group"
        }, React__default.createElement("label", {
          htmlFor: "email"
        }, "Email"), React__default.createElement("input", {
          onChange: function onChange(e) {
            return _this2._setState('email', e.target.value);
          },
          type: "email",
          autoComplete: "email",
          placeholder: "Email",
          id: "email",
          defaultValue: email
        })), React__default.createElement("div", {
          className: "form-group"
        }, React__default.createElement("label", {
          htmlFor: "admin"
        }, React__default.createElement("input", {
          onChange: function onChange(e) {
            return _this2._setState('admin', e.target.checked);
          },
          type: "checkbox",
          id: "admin"
        }), React__default.createElement("span", null, "is Admin"))), React__default.createElement("div", {
          className: "form-group"
        }, React__default.createElement("h3", null, "Permissions"), React__default.createElement(RoleSelect, {
          role: role,
          onChange: function onChange(value) {
            return _this2._setState('role', value);
          }
        })), React__default.createElement("button", {
          onClick: function onClick(e) {
            return _this2._submitUser(e);
          }
        }, add ? 'Create user' : 'Save user'));
      }
    }]);

    return UserForm;
  }(React__default.Component);

  var Users =
  /*#__PURE__*/
  function (_React$Component2) {
    _inherits(Users, _React$Component2);

    function Users(props) {
      var _this3;

      _classCallCheck(this, Users);

      _this3 = _possibleConstructorReturn(this, _getPrototypeOf(Users).call(this, props));
      _this3.state = {
        modalIsVisible: false,
        user: {}
      };
      return _this3;
    }

    _createClass(Users, [{
      key: "_submitUser",
      value: function _submitUser(payload) {
        var _this4 = this;

        this._hideModal();

        console.log('User', payload);
        store.set('isLoading', true);
        Fetch('/admin/data/user', 'POST', payload).then(function (res) {
          if (res.status !== 200) {
            Notify.alert('Error creating user');
          }

          store.set('isLoading', false);

          _this4.props.refresh();
        }).catch(function (err) {
          // TODO: more error messages that actually describe what happened
          console.log(err);
          store.set('isLoading', false);
          Notify.alert('Error creating user');
        });
      }
    }, {
      key: "_deleteUser",
      value: function _deleteUser(id, name) {
        var _this5 = this;

        var confirm = window.confirm("Are you sure you want to delete '".concat(name, "'?"));

        if (confirm) {
          store.set('isLoading', true);
          Fetch('/admin/data/user', 'DELETE', {
            id: id
          }).then(function (res) {
            store.set('isLoading', false);
            Notify.message('User deleted');

            _this5.props.refresh();
          }).catch(function (err) {
            store.set('isLoading', false);
            Notify.alert(err);
          });
        }
      }
    }, {
      key: "_editUser",
      value: function _editUser(user) {
        var _this6 = this;

        this.setState({
          user: user
        }, function () {
          _this6._showModal();
        });
      }
    }, {
      key: "_addUser",
      value: function _addUser() {
        var _this7 = this;

        this.setState({
          user: null
        }, function () {
          _this7._showModal();
        });
      }
    }, {
      key: "_showModal",
      value: function _showModal() {
        this.setState({
          modalIsVisible: true
        });
      }
    }, {
      key: "_hideModal",
      value: function _hideModal() {
        this.setState({
          modalIsVisible: false
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _this8 = this;

        var users = this.props.users;
        var user = this.state.user;
        var keys = ['username', 'email', 'created', 'admin', 'role'];
        return React__default.createElement("div", {
          className: "block"
        }, React__default.createElement(Modal, {
          isVisible: this.state.modalIsVisible,
          close: this._hideModal.bind(this)
        }, React__default.createElement(UserForm, {
          submitUser: this._submitUser.bind(this),
          user: user
        })), React__default.createElement("table", null, React__default.createElement("thead", null, React__default.createElement("tr", null, keys.map(function (k) {
          return React__default.createElement("th", {
            key: k
          }, k);
        }), React__default.createElement("th", null, "Actions"))), users && users.map(function (u, i) {
          var user = _objectSpread({}, u, {
            created: moment(+u.created).format('ddd DD MMM, YYYY h:mma')
          });

          return React__default.createElement(UserRow, {
            key: i,
            keys: keys,
            id: user.id,
            user: user,
            deleteUser: function deleteUser(id, name) {
              return _this8._deleteUser(id, name);
            },
            editUser: function editUser(data) {
              return _this8._editUser(data);
            }
          });
        })), React__default.createElement("button", {
          onClick: function onClick() {
            return _this8._addUser();
          }
        }, "Add user"));
      }
    }]);

    return Users;
  }(React__default.Component);

  //

  var Users$1 =
  /*#__PURE__*/
  function (_Component) {
    _inherits(Users$$1, _Component);

    function Users$$1(props) {
      var _this;

      _classCallCheck(this, Users$$1);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(Users$$1).call(this, props));
      _this.state = {
        isLoading: true,
        users: []
      };
      return _this;
    }

    _createClass(Users$$1, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this._getUsers();
      }
    }, {
      key: "_getUsers",
      value: function _getUsers() {
        var _this2 = this;

        Fetch("/admin/data/user").then(function (res) {
          return res.json();
        }).then(function (users) {
          // renderMain(res);
          _this2.setState({
            users: users,
            isLoading: false
          });
        }).catch(function (err) {
          _this2.setState({
            isLoading: false
          });

          Notify.alert(err);
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;

        var _this$state = this.state,
            isLoading = _this$state.isLoading,
            users = _this$state.users;
        return React__default.createElement("section", null, React__default.createElement("header", null, React__default.createElement("h2", null, "Users")), React__default.createElement("div", {
          className: "blocks"
        }, isLoading ? React__default.createElement(Loader, null) : React__default.createElement(Users, {
          users: users,
          refresh: function refresh() {
            return _this3._getUsers();
          }
        })));
      }
    }]);

    return Users$$1;
  }(React.Component); // <UserList

  document.querySelectorAll('[data-action]').forEach(function (el) {
    el.addEventListener('click', function (e) {
      e.preventDefault();
      store.set('isLoading', true);
      var link = e.target.getAttribute('href');
      Fetch(link).then(function (res) {
        if (res.status === 200) {
          Notify.message(e.target.innerText + ' complete');
        } else {
          Notify.alert(e.target.innerText + ' failed');
        }
      }).catch(function () {
        Notify.alert('Something went wrong... sorry :(');
      }).finally(function () {
        store.set('isLoading', false);
      });
    });
  });

  var App =
  /*#__PURE__*/
  function (_Component) {
    _inherits(App, _Component);

    function App(props) {
      var _this;

      _classCallCheck(this, App);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));
      _this.state = {
        isLoading: props.store.get('isLoading'),
        schemas: null
      };
      return _this;
    }

    _createClass(App, [{
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(newProps) {
        this.setState({
          isLoading: newProps.store.get('isLoading')
        });
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;

        Fetch("/admin/data/schema").then(function (res) {
          return res.json();
        }).then(function (res) {
          _this2.setState({
            schemas: res.schemas
          });
        }).catch(function (err) {
          Notify.alert(err);
        }).finally(function () {
          store.set('isLoading', false);
        }); // window.addEventListener('hashchange', () => {
        //     this._setRoute();
        // });
        // this._setRoute();
      }
    }, {
      key: "_setRouter",
      value: function _setRouter(router) {
        this.router = router;
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;

        var _this$state = this.state,
            isLoading = _this$state.isLoading,
            schemas = _this$state.schemas;
        var route = this.router && this.router.state;
        return React__default.createElement(React.Fragment, null, React__default.createElement(Loader, {
          show: isLoading
        }), React__default.createElement(reactRouterDom.BrowserRouter, {
          ref: function ref(_ref) {
            return _this3._setRouter(_ref);
          },
          path: "/"
        }, React__default.createElement(React.Fragment, null, React__default.createElement(Sidebar, {
          schemas: schemas,
          route: route
        }), React__default.createElement("div", {
          id: "app"
        }, React__default.createElement(reactRouterDom.Route, {
          path: "/admin/content/:resource",
          component: ContentView
        }), React__default.createElement(reactRouterDom.Route, {
          path: "/admin/manage/assets",
          component: AssetsView
        }), React__default.createElement(reactRouterDom.Route, {
          path: "/admin/manage/users",
          component: Users$1
        })))), React__default.createElement(Notify.component, {
          messages: store.messages
        }));
      }
    }]);

    return App;
  }(React.Component);

  var appContainer = document.getElementById('root');

  store.update = function () {
    reactDom.render(React__default.createElement(App, {
      store: store
    }), appContainer);
  };

  store.update();

}(lib.React,lib.ReactDOM,lib.ReactMediumEditor,lib.DropZone,lib.moment,lib.DatePicker,lib.ReactRouterDOM,lib.Promise,lib.Form));
